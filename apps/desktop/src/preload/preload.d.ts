/**
 * ═══════════════════════════════════════════════════════════════════════════
 * ⚠️  WARNING: AUTO-GENERATED FILE - DO NOT EDIT MANUALLY  ⚠️
 * ═══════════════════════════════════════════════════════════════════════════
 *
 * This file is automatically generated from the RPC package source of truth.
 *
 * 🔒 Source of Truth:
 *    packages/@atomiton/rpc/src/shared/types.ts
 *
 * 🔄 To Update Types:
 *    pnpm generate:preload-types
 *
 * 🤖 Auto-Generation:
 *    - Pre-commit hook automatically regenerates when RPC types change
 *    - Lefthook runs: generate → validate → stage
 *    - CI validates types are in sync
 *
 * ❓ Why Auto-Generated?
 *    The preload script is security-boxed by Electron and cannot import
 *    from npm packages. We maintain type safety by auto-generating a copy
 *    from the RPC source of truth.
 *
 * 🚫 DO NOT:
 *    - Edit this file manually
 *    - Add custom types here
 *    - Modify type definitions
 *    - Bypass the generation script
 *
 * ✅ TO ADD NEW TYPES:
 *    1. Add to: packages/@atomiton/rpc/src/shared/types.ts
 *    2. Run: pnpm generate:preload-types
 *    3. Commit both files
 *
 * ═══════════════════════════════════════════════════════════════════════════
 */

import type { ElectronAPI } from "@electron-toolkit/preload";

// Extended ElectronAPI
type ExtendedElectronAPI = ElectronAPI;

// ============================================================================
// AUTO-GENERATED TYPES FROM RPC PACKAGE
// ============================================================================

/**
 * Electron IPC Bridge Interface
 * Exposed via contextBridge in preload script
 *
 * NOTE: This type is COPIED to apps/desktop/src/preload/preload.d.ts
 * for preload compilation (preload is security-boxed and cannot import packages).
 * Use scripts/validate-preload-types.ts to ensure they stay in sync.
 */
type AtomitonBridge = {
  call(
    channel: string,
    command: string,
    args?: unknown,
  ): Promise<AtomitonBridgeResponse>;

  listen(
    channel: string,
    event: string,
    callback: (data: unknown) => void,
  ): () => void;

  send?(channel: string, event: string, data?: unknown): void;
};

/**
 * Response wrapper from bridge calls
 */
type AtomitonBridgeResponse<T = unknown> = {
  result?: T;
  status?: string;
  error?: RPCError;
};

/**
 * Standard RPC error format
 */
type RPCError = {
  code: string;
  message: string;
  data?: unknown;
  stack?: string;
};

declare global {
  // eslint-disable-next-line @typescript-eslint/consistent-type-definitions
  interface Window {
    electron: ExtendedElectronAPI;
    atomitonBridge: AtomitonBridge;
  }
}

export {};
