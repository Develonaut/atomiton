/**
 * @atomiton/nodes - Main Entry Point
 *
 * Minimal exports for essential functionality.
 * Direct imports only - no barrel exports for performance.
 */

// Core API
export { createNode } from "./createNode";
export type { CreateNodeInput } from "./createNode";

// Composite functionality
export { createCompositeNode } from "./composite/createCompositeNode";
export { validateComposite } from "./composite/validation/validateComposite";

// Transform utilities
export { fromYaml, toYaml } from "./transform";

// Templates
export { compositeTemplates, getAllTemplates } from "./composite/templates";
export type { CompositeTemplate } from "./composite/templates";

// Node implementations (direct imports)
export { code } from "./atomic/nodes/code";
export { transform } from "./atomic/nodes/transform";
export { parallel } from "./atomic/nodes/parallel";
export { csvReader } from "./atomic/nodes/csv-reader";
export { fileSystem } from "./atomic/nodes/file-system";
export { httpRequest } from "./atomic/nodes/http-request";
export { imageComposite } from "./atomic/nodes/image-composite";
export { loop } from "./atomic/nodes/loop";
export { shellCommand } from "./atomic/nodes/shell-command";

// Node discovery utilities
export { getNodes as nodes, getNodesByCategory, getNodeByType } from "./atomic/nodes/utils";

// Essential types
export type { Node, NodeType, NodeEdge, NodePosition } from "./types";
export type { CompositeDefinition } from "./composite/types";

// Version management
export { updateNodeVersion, getVersionUpdateOptions } from "./updateNodeVersion";
export type { UpdateNodeVersionInput, UpdateNodeVersionResult, VersionUpdateType } from "./updateNodeVersion";
export {
  parseVersion,
  compareVersions,
  isValidVersionUpgrade,
  incrementVersion,
  validateInitialVersion,
  getNextVersionOptions,
} from "./validation/version";
export type {
  SemanticVersion,
  VersionComparison,
  VersionValidationResult,
} from "./validation/version";