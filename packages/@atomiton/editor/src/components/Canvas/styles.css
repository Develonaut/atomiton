/* Register custom property for smooth animation */
@property --progress-deg {
  syntax: "<angle>";
  inherits: false;
  initial-value: 0deg;
}

/**
 * Browser compatibility note for @property
 *
 * The @property CSS at-rule is not supported in Firefox as of 2025
 * Without it, custom properties like --progress-deg cannot be smoothly transitioned
 *
 * Current behavior:
 * - Chrome/Edge/Safari (Electron): Smooth circular progress animation ✅
 * - Firefox: Progress updates instantly without smooth animation
 *
 * Note: Electron desktop app uses Chromium, so full @property support is guaranteed
 *
 * Future enhancement (if web support needed):
 * - Add runtime detection using CSS.supports() or CSS.registerProperty
 * - Dynamically disable transitions for browsers without @property support
 * - See BROWSER_SUPPORT.md for implementation details
 */

:root {
  --atomiton-node-width: 80px;
  --atomiton-node-height: 80px;
  --atomiton-node-border-radius: 1.25rem;
  --atomiton-border-width: 2px; /* Controls thickness of node borders and edge paths */
  --atomiton-border-overlay-width: 2px; /* Overlay width for execution states */
  --atomiton-node-border-default: var(--color-s-01);
  --atomiton-node-border-hover: var(--color-s-02);
  --atomiton-node-border-selected: var(--color-shade-06);
  --atomiton-node-background: var(--color-surface-01);
  --atomiton-node-shadow-hover: var(--box-shadow-prompt-input);
  --atomiton-node-shadow-selected: var(--box-shadow-prompt-input);
  --atomiton-node-inner-ring-color: var(--shade-02);
  --atomiton-node-inner-ring-size: 4px;
  --atomiton-handle-size: 12px;
  --atomiton-handle-border-width: 2px;
  --atomiton-handle-border-color: var(--shade-01);
  --atomiton-handle-bg-default: var(--atomiton-node-border-default);
  --atomiton-handle-bg-hover: var(--atomiton-node-border-hover);
  --atomiton-handle-bg-selected: var(--atomiton-node-border-selected);
  --atomiton-transition-duration: 0.2s;
  --atomiton-transition-easing: ease;

  /* Execution state colors - using theme colors from @atomiton/ui */
  --atomiton-node-state-pending: var(--color-tertiary);
  --atomiton-node-state-executing: var(--color-blue);
  --atomiton-node-state-completed: var(--color-green);
  --atomiton-node-state-error: var(--color-red);
  --atomiton-node-state-skipped: var(--color-yellow);

  /* Progress animation timings */
  --atomiton-progress-transition-duration: 0.3s;
  --atomiton-progress-deg-per-percent: 3.6deg; /* 360deg / 100 for percentage conversion */

  /* Completion animation durations and effects */
  --atomiton-completion-animation-duration: 0.6s;
}

/* ============================================================================
 * Keyframes for Node Completion Animations
 * ============================================================================ */

@keyframes atomiton-pulse {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.02);
  }
}

/* ============================================================================
 * Node Styles
 * ============================================================================ */

:is(
  .react-flow__node,
  .react-flow__node-input,
  .react-flow__node-default,
  .react-flow__node-output,
  .react-flow__node-group
) {
  box-sizing: border-box;
  width: var(--atomiton-node-width);
  height: var(--atomiton-node-height);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  border-radius: var(--atomiton-node-border-radius);
  background-color: var(--atomiton-node-background);
  cursor: pointer;

  /* Inner node container */
  & .atomiton-node {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    border-radius: var(--atomiton-node-border-radius);
    transition: box-shadow var(--atomiton-transition-duration)
      var(--atomiton-transition-easing);

    /* Always-visible gray border (base layer) */
    &::before {
      content: "";
      position: absolute;
      inset: calc(-1 * var(--atomiton-border-width));
      border-radius: inherit;
      border: var(--atomiton-border-width) solid
        var(--atomiton-node-border-default);
      pointer-events: none;
      transition: border-color var(--atomiton-transition-duration)
        var(--atomiton-transition-easing);
    }
  }

  /* Hover state */
  &.selectable:hover {
    border-color: var(--atomiton-node-border-hover);
    box-shadow: none;

    & .atomiton-node {
      box-shadow: 0 0 0 var(--atomiton-node-inner-ring-size)
        var(--atomiton-node-inner-ring-color) inset;
    }

    & .react-flow__handle {
      background-color: var(--atomiton-handle-bg-hover);
    }
  }

  /* Selected/focus state */
  &.selectable:is(.selected, :focus, :focus-visible) {
    border-color: var(--atomiton-node-border-selected);
    box-shadow: var(--atomiton-node-shadow-selected);

    & .atomiton-node {
      box-shadow: 0 0 0 var(--atomiton-node-inner-ring-size)
        var(--atomiton-node-inner-ring-color) inset;

      &::before {
        border-color: var(--atomiton-node-border-selected);
      }
    }

    & .react-flow__handle {
      background-color: var(--atomiton-handle-bg-selected);
    }
  }
}

/* ============================================================================
 * Handle Styles
 * ============================================================================ */

.react-flow__handle {
  z-index: 1; /* Above ::after overlay */
  width: var(--atomiton-handle-size);
  height: var(--atomiton-handle-size);
  border: var(--atomiton-handle-border-width) solid
    var(--atomiton-handle-border-color);
  background-color: var(--atomiton-handle-bg-default);
  border-radius: 50%;
  transition: background-color var(--atomiton-transition-duration)
    var(--atomiton-transition-easing);
}

/* ============================================================================
 * Execution State Overlays
 * ============================================================================ */

/* Shared dual-border overlay (executing and completed states) */
:is(
  .react-flow__node,
  .react-flow__node-input,
  .react-flow__node-default,
  .react-flow__node-output,
  .react-flow__node-group
):is([data-execution-state="executing"], [data-execution-state="completed"])
  .atomiton-node::after {
  content: "";
  position: absolute;
  z-index: 0; /* Below handles (z-index: 1) */
  inset: calc(-1 * var(--atomiton-border-overlay-width));
  border-radius: inherit;
  padding: var(--atomiton-border-overlay-width);
  /* Two paths from left (input) to right (output):
     - Bottom path: left → down → right (clockwise)
     - Top path: left → up → right (counter-clockwise) */
  background:
    conic-gradient(
      from 270deg,
      var(--border-color) 0deg,
      var(--border-color) calc(var(--progress-deg) / 2),
      transparent calc(var(--progress-deg) / 2)
    ),
    conic-gradient(
      from 270deg,
      transparent 0deg,
      transparent calc(360deg - var(--progress-deg) / 2),
      var(--border-color) calc(360deg - var(--progress-deg) / 2)
    );
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: xor;
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  mask-composite: exclude;
  pointer-events: none;
  transition: --progress-deg var(--atomiton-progress-transition-duration)
    ease-out;
}

/* Executing state - blue border with dynamic progress */
:is(
  .react-flow__node,
  .react-flow__node-input,
  .react-flow__node-default,
  .react-flow__node-output,
  .react-flow__node-group
)[data-execution-state="executing"] {
  & .atomiton-node::after {
    --border-color: var(--atomiton-node-state-executing);
    --progress-deg: calc(
      var(--progress, 0) * var(--atomiton-progress-deg-per-percent)
    );
  }

  & .react-flow__handle {
    background-color: var(--atomiton-node-state-executing);
  }
}

/* Completed state - green border at 100% */
:is(
  .react-flow__node,
  .react-flow__node-input,
  .react-flow__node-default,
  .react-flow__node-output,
  .react-flow__node-group
)[data-execution-state="completed"] {
  & .atomiton-node::after {
    --border-color: var(--atomiton-node-state-completed);
    --progress-deg: 360deg; /* Full progress */
  }

  & .react-flow__handle {
    background-color: var(--atomiton-node-state-completed);
  }

  /* Pulse animation when node completes */
  & .atomiton-node {
    animation: atomiton-pulse 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }
}

/* Error state - red border overlay */
:is(
  .react-flow__node,
  .react-flow__node-input,
  .react-flow__node-default,
  .react-flow__node-output,
  .react-flow__node-group
)[data-execution-state="error"] {
  & .atomiton-node::after {
    content: "";
    position: absolute;
    z-index: 0;
    inset: calc(-1 * var(--atomiton-border-overlay-width));
    border-radius: inherit;
    padding: var(--atomiton-border-overlay-width);
    background: var(--atomiton-node-state-error);
    -webkit-mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    mask-composite: exclude;
    pointer-events: none;
  }

  & .react-flow__handle {
    background-color: var(--atomiton-node-state-error);
  }

  /* Pulse animation when node errors */
  & .atomiton-node {
    animation: atomiton-pulse 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }
}

/* Skipped state */
:is(
  .react-flow__node,
  .react-flow__node-input,
  .react-flow__node-default,
  .react-flow__node-output,
  .react-flow__node-group
)[data-execution-state="skipped"] {
  border-color: var(--atomiton-node-state-skipped);

  & .react-flow__handle {
    background-color: var(--atomiton-node-state-skipped);
  }
}

/* ============================================================================
 * Edge Progress Animations
 * ============================================================================
 * Dual-path approach for linear determinate progress bars:
 * 1. Background path (gray) - always visible
 * 2. Foreground path (green/red) - uses dasharray to progressively reveal
 */

/* Background path - always visible in gray, matches node border */
.react-flow__edge-path-bg {
  stroke: var(--atomiton-node-border-default);
  stroke-width: var(--atomiton-border-width);
}

/* Override default edge path stroke color */
.react-flow__edge-path {
  stroke: var(--atomiton-node-border-default);
}

/* Foreground path states - only show colored overlay for executing/error */
.react-flow__edge[data-edge-state="inactive"] .react-flow__edge-path,
.react-flow__edge[data-edge-state="pending"] .react-flow__edge-path {
  stroke: none; /* Hide foreground, show only gray background */
}

/* Executing state - blue progress overlay */
.react-flow__edge[data-edge-state="executing"] .react-flow__edge-path {
  stroke: var(--atomiton-node-state-executing);
  stroke-width: var(--atomiton-border-overlay-width);
  /* dasharray and dashoffset set dynamically in JS for progress effect */
  transition:
    stroke var(--atomiton-progress-transition-duration) ease,
    stroke-dashoffset var(--atomiton-progress-transition-duration) ease;
  will-change: stroke-dashoffset; /* GPU acceleration hint */
}

/* Completed state - green progress overlay */
.react-flow__edge[data-edge-state="completed"] .react-flow__edge-path {
  stroke: var(--atomiton-node-state-completed);
  stroke-width: var(--atomiton-border-overlay-width);
  /* dasharray and dashoffset set dynamically in JS for progress effect */
  transition:
    stroke var(--atomiton-progress-transition-duration) ease,
    stroke-dashoffset var(--atomiton-progress-transition-duration) ease;
  will-change: stroke-dashoffset; /* GPU acceleration hint */
}

/* Error state - red when connected to error nodes */
.react-flow__edge[data-edge-state="error"] .react-flow__edge-path {
  stroke: var(--atomiton-node-state-error);
  stroke-width: var(--atomiton-border-overlay-width);
  /* dasharray and dashoffset set dynamically in JS for progress effect */
  transition: stroke var(--atomiton-progress-transition-duration) ease;
}
