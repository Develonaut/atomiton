/* Register custom property for smooth animation */
@property --progress-deg {
  syntax: "<angle>";
  inherits: false;
  initial-value: 0deg;
}

/**
 * Browser compatibility note for @property
 *
 * The @property CSS at-rule is not supported in Firefox as of 2025
 * Without it, custom properties like --progress-deg cannot be smoothly transitioned
 *
 * Current behavior:
 * - Chrome/Edge/Safari (Electron): Smooth circular progress animation âœ…
 * - Firefox: Progress updates instantly without smooth animation
 *
 * Note: Electron desktop app uses Chromium, so full @property support is guaranteed
 *
 * Future enhancement (if web support needed):
 * - Add runtime detection using CSS.supports() or CSS.registerProperty
 * - Dynamically disable transitions for browsers without @property support
 * - See BROWSER_SUPPORT.md for implementation details
 */

:root {
  --atomiton-node-width: 80px;
  --atomiton-node-height: 80px;
  --atomiton-node-border-radius: 1.25rem;
  --atomiton-border-width: 2px; /* Controls thickness of node borders and edge paths */
  --atomiton-border-overlay-width: 2px; /* Overlay width for execution states */
  --atomiton-node-border-default: var(--color-s-01);
  --atomiton-node-border-hover: var(--color-s-02);
  --atomiton-node-border-selected: var(--color-shade-06);
  --atomiton-node-background: var(--color-surface-01);
  --atomiton-node-shadow-hover: var(--box-shadow-prompt-input);
  --atomiton-node-shadow-selected: var(--box-shadow-prompt-input);
  --atomiton-node-inner-ring-color: var(--shade-02);
  --atomiton-node-inner-ring-size: 4px;
  --atomiton-handle-size: 12px;
  --atomiton-handle-border-width: 2px;
  --atomiton-handle-border-color: var(--shade-01);
  --atomiton-handle-bg-default: var(--atomiton-node-border-default);
  --atomiton-handle-bg-hover: var(--atomiton-node-border-hover);
  --atomiton-handle-bg-selected: var(--atomiton-node-border-selected);
  --atomiton-transition-duration: 0.2s;
  --atomiton-transition-easing: ease;

  /* Execution state colors - using theme colors from @atomiton/ui */
  --atomiton-node-state-pending: var(--color-tertiary);
  --atomiton-node-state-executing: var(--color-blue);
  --atomiton-node-state-completed: var(--color-green);
  --atomiton-node-state-error: var(--color-red);
  --atomiton-node-state-skipped: var(--color-yellow);

  /* Progress animation timings */
  --atomiton-progress-transition-duration: 0.3s;
  --atomiton-progress-deg-per-percent: 3.6deg; /* 360deg / 100 for percentage conversion */
}

:is(
  .react-flow__node,
  .react-flow__node-input,
  .react-flow__node-default,
  .react-flow__node-output,
  .react-flow__node-group
) {
  box-sizing: border-box;
  width: var(--atomiton-node-width);
  height: var(--atomiton-node-height);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  border-radius: var(--atomiton-node-border-radius);
  background-color: var(--atomiton-node-background);
  cursor: pointer;
}

:is(
    .react-flow__node,
    .react-flow__node-input,
    .react-flow__node-default,
    .react-flow__node-output,
    .react-flow__node-group
  )
  .atomiton-node {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  border-radius: var(--atomiton-node-border-radius);
  transition: box-shadow var(--atomiton-transition-duration)
    var(--atomiton-transition-easing);
}

/* ::before pseudo element - always-visible gray border (base layer, like edge background path) */
:is(
    .react-flow__node,
    .react-flow__node-input,
    .react-flow__node-default,
    .react-flow__node-output,
    .react-flow__node-group
  )
  .atomiton-node::before {
  content: "";
  position: absolute;
  inset: calc(-1 * var(--atomiton-border-width));
  border-radius: inherit;
  border: var(--atomiton-border-width) solid var(--atomiton-node-border-default);
  pointer-events: none;
  transition: border-color var(--atomiton-transition-duration)
    var(--atomiton-transition-easing);
}

:is(
    .react-flow__node,
    .react-flow__node-input,
    .react-flow__node-default,
    .react-flow__node-output,
    .react-flow__node-group
  ).selectable:hover {
  border-color: var(--atomiton-node-border-hover);
  box-shadow: none;
}

:is(
    .react-flow__node,
    .react-flow__node-input,
    .react-flow__node-default,
    .react-flow__node-output,
    .react-flow__node-group
  ).selectable:hover
  .atomiton-node {
  box-shadow: 0 0 0 var(--atomiton-node-inner-ring-size)
    var(--atomiton-node-inner-ring-color) inset;
}

:is(
    .react-flow__node,
    .react-flow__node-input,
    .react-flow__node-default,
    .react-flow__node-output,
    .react-flow__node-group
  ).selectable:is(.selected, :focus, :focus-visible) {
  border-color: var(--atomiton-node-border-selected);
  box-shadow: var(--atomiton-node-shadow-selected);
}

:is(
    .react-flow__node,
    .react-flow__node-input,
    .react-flow__node-default,
    .react-flow__node-output,
    .react-flow__node-group
  ).selectable:is(.selected, :focus, :focus-visible)
  .atomiton-node {
  box-shadow: 0 0 0 var(--atomiton-node-inner-ring-size)
    var(--atomiton-node-inner-ring-color) inset;
}

/* Change ::before border color when selected to match handles */
:is(
    .react-flow__node,
    .react-flow__node-input,
    .react-flow__node-default,
    .react-flow__node-output,
    .react-flow__node-group
  ).selectable:is(.selected, :focus, :focus-visible)
  .atomiton-node::before {
  border-color: var(--atomiton-node-border-selected);
}

.react-flow__handle {
  z-index: 1; /* Above ::after overlay */
  width: var(--atomiton-handle-size);
  height: var(--atomiton-handle-size);
  border: var(--atomiton-handle-border-width) solid
    var(--atomiton-handle-border-color);
  background-color: var(--atomiton-handle-bg-default);
  border-radius: 50%;
  transition: background-color var(--atomiton-transition-duration)
    var(--atomiton-transition-easing);
}

:is(
    .react-flow__node,
    .react-flow__node-input,
    .react-flow__node-default,
    .react-flow__node-output,
    .react-flow__node-group
  ).selectable:hover
  .react-flow__handle {
  background-color: var(--atomiton-handle-bg-hover);
}

:is(
    .react-flow__node,
    .react-flow__node-input,
    .react-flow__node-default,
    .react-flow__node-output,
    .react-flow__node-group
  ).selectable:is(.selected, :focus, :focus-visible)
  .react-flow__handle {
  background-color: var(--atomiton-handle-bg-selected);
}

/* ::after pseudo element - colored progress overlay (only for executing/error states) */

/* Executing state - blue conic gradient progress overlay */
:is(
    .react-flow__node,
    .react-flow__node-input,
    .react-flow__node-default,
    .react-flow__node-output,
    .react-flow__node-group
  )[data-execution-state="executing"]
  .atomiton-node::after {
  --progress-deg: calc(var(--progress, 0) * var(--atomiton-progress-deg-per-percent));
  content: "";
  position: absolute;
  z-index: 0; /* Below handles (z-index: 1) */
  inset: calc(-1 * var(--atomiton-border-overlay-width));
  border-radius: inherit;
  padding: var(--atomiton-border-overlay-width);
  background: conic-gradient(
    from -90deg,
    var(--atomiton-node-state-executing) var(--progress-deg),
    transparent var(--progress-deg) 360deg
  );
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: xor;
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  mask-composite: exclude;
  pointer-events: none;
  transition: --progress-deg var(--atomiton-progress-transition-duration) ease-out;
}

:is(
    .react-flow__node,
    .react-flow__node-input,
    .react-flow__node-default,
    .react-flow__node-output,
    .react-flow__node-group
  )[data-execution-state="executing"]
  .react-flow__handle {
  background-color: var(--atomiton-node-state-executing);
}

/* Completed state - green border overlay (100%) */
:is(
    .react-flow__node,
    .react-flow__node-input,
    .react-flow__node-default,
    .react-flow__node-output,
    .react-flow__node-group
  )[data-execution-state="completed"]
  .atomiton-node::after {
  --progress-deg: 360deg; /* Always full circle for completed */
  content: "";
  position: absolute;
  z-index: 0; /* Below handles (z-index: 1) */
  inset: calc(-1 * var(--atomiton-border-overlay-width));
  border-radius: inherit;
  padding: var(--atomiton-border-overlay-width);
  background: conic-gradient(
    from -90deg,
    var(--atomiton-node-state-completed) var(--progress-deg),
    transparent var(--progress-deg) 360deg
  );
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: xor;
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  mask-composite: exclude;
  pointer-events: none;
}

:is(
    .react-flow__node,
    .react-flow__node-input,
    .react-flow__node-default,
    .react-flow__node-output,
    .react-flow__node-group
  )[data-execution-state="completed"]
  .react-flow__handle {
  background-color: var(--atomiton-node-state-completed);
}

/* Error state - red conic gradient overlay */
:is(
    .react-flow__node,
    .react-flow__node-input,
    .react-flow__node-default,
    .react-flow__node-output,
    .react-flow__node-group
  )[data-execution-state="error"]
  .atomiton-node::after {
  content: "";
  position: absolute;
  z-index: 0; /* Below handles (z-index: 1) */
  inset: calc(-1 * var(--atomiton-border-overlay-width));
  border-radius: inherit;
  padding: var(--atomiton-border-overlay-width);
  /* Error state shows full red border, ignoring progress value */
  background: var(--atomiton-node-state-error);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: xor;
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  mask-composite: exclude;
  pointer-events: none;
}

:is(
    .react-flow__node,
    .react-flow__node-input,
    .react-flow__node-default,
    .react-flow__node-output,
    .react-flow__node-group
  )[data-execution-state="error"]
  .react-flow__handle {
  background-color: var(--atomiton-node-state-error);
}

:is(
  .react-flow__node,
  .react-flow__node-input,
  .react-flow__node-default,
  .react-flow__node-output,
  .react-flow__node-group
)[data-execution-state="skipped"] {
  border-color: var(--atomiton-node-state-skipped);
}

:is(
    .react-flow__node,
    .react-flow__node-input,
    .react-flow__node-default,
    .react-flow__node-output,
    .react-flow__node-group
  )[data-execution-state="skipped"]
  .react-flow__handle {
  background-color: var(--atomiton-node-state-skipped);
}

/* No border color transitions - border stays default gray, only overlay changes */

/* ============================================================================
 * Edge Progress Animations
 * ============================================================================
 * Dual-path approach for linear determinate progress bars:
 * 1. Background path (gray) - always visible
 * 2. Foreground path (green/red) - uses dasharray to progressively reveal
 */

/* Background path - always visible in gray, matches node border */
.react-flow__edge-path-bg {
  stroke: var(--atomiton-node-border-default);
  stroke-width: var(--atomiton-border-width);
}

/* Override default edge path stroke color */
.react-flow__edge-path {
  stroke: var(--atomiton-node-border-default);
}

/* Foreground path states - only show colored overlay for executing/error */
.react-flow__edge[data-edge-state="inactive"] .react-flow__edge-path,
.react-flow__edge[data-edge-state="pending"] .react-flow__edge-path {
  stroke: none; /* Hide foreground, show only gray background */
}

/* Executing state - blue progress overlay */
.react-flow__edge[data-edge-state="executing"] .react-flow__edge-path {
  stroke: var(--atomiton-node-state-executing); /* Blue while executing */
  stroke-width: var(--atomiton-border-overlay-width);
  /* dasharray and dashoffset set dynamically in JS for progress effect */
  transition:
    stroke var(--atomiton-progress-transition-duration) ease,
    stroke-dashoffset var(--atomiton-progress-transition-duration) ease;
  will-change: stroke-dashoffset; /* GPU acceleration hint */
}

/* Completed state - green progress overlay */
.react-flow__edge[data-edge-state="completed"] .react-flow__edge-path {
  stroke: var(--atomiton-node-state-completed); /* Green when complete */
  stroke-width: var(--atomiton-border-overlay-width);
  /* dasharray and dashoffset set dynamically in JS for progress effect */
  transition:
    stroke var(--atomiton-progress-transition-duration) ease,
    stroke-dashoffset var(--atomiton-progress-transition-duration) ease;
  will-change: stroke-dashoffset; /* GPU acceleration hint */
}

/* Error state - red when connected to error nodes */
.react-flow__edge[data-edge-state="error"] .react-flow__edge-path {
  stroke: var(--atomiton-node-state-error); /* Red for errors */
  stroke-width: var(--atomiton-border-overlay-width);
  /* dasharray and dashoffset set dynamically in JS for progress effect */
  transition: stroke var(--atomiton-progress-transition-duration) ease;
}
